import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as p,c as i,a as n,b as s,d as e,f as t}from"./app-040d6999.js";const c={},r=n("h1",{id:"element-ui自动新增组件方式学习",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#element-ui自动新增组件方式学习","aria-hidden":"true"},"#"),s(" element-ui自动新增组件方式学习")],-1),d=n("h2",{id:"仓库地址",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#仓库地址","aria-hidden":"true"},"#"),s(" 仓库地址")],-1),u={href:"https://github.com/Tandayuan/elementui-autoAddComponent-study",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),s(" 参考资料")],-1),h={href:"http://javascript.ruanyifeng.com/nodejs/process.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://zhuanlan.zhihu.com/p/56489231",target:"_blank",rel:"noopener noreferrer"},m={href:"https://juejin.cn/post/7031331765482422280",target:"_blank",rel:"noopener noreferrer"},_={href:"https://blog.csdn.net/qfc_128220/article/details/122233317",target:"_blank",rel:"noopener noreferrer"},f={href:"https://mp.weixin.qq.com/s/lQKTCS_QB0E62SK9oXD4LA",target:"_blank",rel:"noopener noreferrer"},v={href:"https://mp.weixin.qq.com/s?__biz=MzI2MjcxNTQ0Nw==&mid=2247484317&idx=1&sn=c0b397b6bd5fdfced0c1bebc187a7c0d&chksm=ea47a2c5dd302bd37b285f65dd7a92df8ca1bc213465091e82a28be08ec5808b905e9fb69bec&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},g=n("strong",null,"重点查看",-1),x={href:"https://zhuanlan.zhihu.com/p/475820456",target:"_blank",rel:"noopener noreferrer"},j={href:"https://www.unicode.org/faq/utf_bom.html",target:"_blank",rel:"noopener noreferrer"},S=t('<h2 id="学习目标" tabindex="-1"><a class="header-anchor" href="#学习目标" aria-hidden="true">#</a> 学习目标</h2><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 了解Makefile的作用</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 学习涉及NodeJs知识相关的Api</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 学习流(Stream)、Blob、文件(File)的定义</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> 学习Base64、Blob、File 三种类型的相互转换</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-4" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-4"> 学习主流编码规则的特点(UTF-8、ASCII、GBK……)</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-5" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-5"> 学习npm包<code>file-save</code>在本项目的应用</label></li></ul><h2 id="了解makefile的作用" tabindex="-1"><a class="header-anchor" href="#了解makefile的作用" aria-hidden="true">#</a> 了解Makefile的作用</h2><p>一个自动化脚本，执行预设好的脚本。</p><h2 id="学习涉及nodejs知识相关的api" tabindex="-1"><a class="header-anchor" href="#学习涉及nodejs知识相关的api" aria-hidden="true">#</a> 学习涉及NodeJs知识相关的Api</h2>',5),w={href:"https://nodejs.cn/api/fs.html#fsreadfilesyncpath-options",target:"_blank",rel:"noopener noreferrer"},y=t(`<blockquote><p>同步读取文件的所有内容，如果没有指定编码返回的是二进制数据缓冲对象，否则返回按指定编码生成的字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 读取json文件为字符串示例：</span>
<span class="token keyword">const</span> navConfigFile <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;../../examples/nav.config.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> k <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>navConfigFile<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&#39;utf-8&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 读取sass文件为字符串示例：</span>
<span class="token keyword">const</span> sassPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;../../packages/theme-chalk/src/index.scss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> jStr <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>sassPath<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&#39;utf-8&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sassStrFile <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>jStr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">@import &quot;./heihei.scss&quot;;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sassStrFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>`,1),F=t(`<li><p><code>path.join()：join方法上的所有参数拼接成字符串路径</code></p></li><li><p><code>__dirname</code>：</p><p>在node.js中，__dirname是一个内置变量，表示当前文件所在的目录的绝对路径。它是一个全局变量，可以在任何地方使用。__dirname是通过node.js内置的模块path获取的，它与当前文件的物理位置有关，而不是与执行node命令的位置有关。在使用__dirname时，通常会结合其他模块路径一起使用，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取当前文件所在目录的绝对路径</span>
<span class="token keyword">const</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;file.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，使用了node.js内置的path模块将文件名&#39;file.txt&#39;与__dirname拼接起来，形成文件的完整路径。这样可以避免硬编码文件路径，使代码更具可移植性。</p></li><li><p><code>process.exit()</code>：中止nodejs进程的方法。</p></li><li><p><code>process.argv</code></p><p>在node.js中，process.argv是一个包含当前进程的命令行参数的数组。它是一个全局变量，可以在任何地方使用。</p><p>process.argv的第一个元素是node.js的可执行文件的绝对路径，第二个元素是当前执行的JavaScript文件的绝对路径。从第三个元素开始，便是传递给JavaScript文件的命令行参数。</p><p>例如，在以下命令中，&#39;test.js&#39;是node.js执行的JavaScript文件，&#39;apple&#39;和&#39;banana&#39;是传递给test.js的两个命令行参数：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>node test.js apple banana
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时，在test.js文件中，可以通过process.argv获取到以下数组：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[
  &#39;/usr/local/bin/node&#39;,
  &#39;/Users/user/test.js&#39;,
  &#39;apple&#39;,
  &#39;banana&#39;
]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从数组中可以看到，process.argv是以字符串形式呈现的，如果需要将其中的参数转换为其他类型，例如数字或布尔值，则需要进行类型转换。如果需要解析命令行参数，可以使用第三方模块，如commander、yargs等。</p></li>`,4),B=n("h2",{id:"学习流-stream-、blob、文件-file-的定义",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#学习流-stream-、blob、文件-file-的定义","aria-hidden":"true"},"#"),s(" 学习流(Stream)、Blob、文件(File)的定义")],-1),I={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/File",target:"_blank",rel:"noopener noreferrer"},A=n("strong",null,[n("code",null,"File")],-1),z=n("code",null,"File",-1),C={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob",target:"_blank",rel:"noopener noreferrer"},U=n("code",null,"Blob",-1),q=n("code",null,"File",-1),N={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"Blob",-1),T={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob",target:"_blank",rel:"noopener noreferrer"},W={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"ReadableStream",-1),D=n("code",null,"Blob",-1),J={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/File",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,"File",-1),M={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Streams_API",target:"_blank",rel:"noopener noreferrer"},G=n("p",null,"流会将你想要从网络接受的资源分成一个个小的分块，然后按位处理它。这正是浏览器在接收用于显示 web 页面的资源时做的事情——视频缓冲区和更多的内容可以逐渐播放，有时候随着内容的加载，你可以看到图像逐渐地显示。",-1),V=n("strong",null,"PS:",-1),L={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Streams_API#%E7%A4%BA%E4%BE%8B",target:"_blank",rel:"noopener noreferrer"},O=n("h2",{id:"学习base64、blob、file-三种类型的相互转换",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#学习base64、blob、file-三种类型的相互转换","aria-hidden":"true"},"#"),s(" 学习Base64、Blob、File 三种类型的相互转换")],-1),Q=n("li",null,[s("学习Demo地址："),n("code",null,"StudyCase"),s("文件夹")],-1),R={href:"https://blog.csdn.net/BaymaxCSDN/article/details/108077233",target:"_blank",rel:"noopener noreferrer"},X=n("h2",{id:"学习主流编码规则的特点-utf-8、ascii、gbk",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#学习主流编码规则的特点-utf-8、ascii、gbk","aria-hidden":"true"},"#"),s(" 学习主流编码规则的特点(UTF-8、ASCII、GBK……)")],-1),$=n("p",null,"计算机按照二进制形式存储和读取数据。为了让人类能够看得懂，二进制数据通过某个编码规则映射对应的字符。常见的编码规则由UTF-8、ASCII、GBK。",-1),H=n("p",null,"它们具体转换成字符的方法如下文：",-1),Y={href:"https://zhuanlan.zhihu.com/p/475820456",target:"_blank",rel:"noopener noreferrer"},Z=n("p",null,"Unicode 和 UTF-8 的对应关系 ？",-1),nn=n("p",null,[n("strong",null,"码位"),s("是表示文本的系统（例如 Unicode）中用于表示抽象字符的数值。")],-1),sn=n("p",null,"在 Unicode 中，码位以“U+1234”的形式表示，其中的“1234”是分配的数值。Unicode中A字符的码位是：U+0041；",-1),an={href:"https://zhuanlan.zhihu.com/p/475820456",target:"_blank",rel:"noopener noreferrer"},en=n("h2",{id:"学习npm包file-save在本项目的应用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#学习npm包file-save在本项目的应用","aria-hidden":"true"},"#"),s(" 学习npm包"),n("code",null,"file-save"),s("在本项目的应用")],-1),tn=n("p",null,"file-save包我的理解是是利用了nodejs的fs、path等API创建一个可写流，将文本数据写入/覆盖到指定的文件中。",-1),on={href:"https://www.npmjs.com/package/file-save",target:"_blank",rel:"noopener noreferrer"},ln=t(`<blockquote><p>简单实现Demo：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> curFP <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> writeStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>curFP<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">flags</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
writeStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;谭达源的一些可写流数据&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
writeStream<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
writeStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;finish&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Write file finish.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ChatGPT的解释：</p><p>在示例中，首先使用path模块的join方法获取要创建文件的完整路径，然后使用fs.createWriteStream方法创建一个可写流，指定要创建的文件路径和选项对象{flags: ‘a’}，其中flags选项表示文件的打开方式。此处使用’a’表示以追加模式写入文件。如果文件已经存在，则新写入的数据将添加在文件末尾。如果不指定flags选项，则默认以覆盖模式打开文件，即写入数据前会清空文件原有内容。</p><p>接下来，使用writeStream.write方法将数据写入文件，然后使用writeStream.end方法结束写入流并关闭文件。为了确定写入已完成，我们可以使用writeStream的’finish’事件监听器，在文件写入完成后打印一条信息。</p><p>需要注意的是，writeStream.write方法可以多次调用，每次调用都会写入一个数据块到文件中。而一旦调用了writeStream.end方法，则writeStream就无法再写入数据了。在每次写入数据前，也可以使用writeStream.write方法的回调函数来处理写入数据的错误信息。</p></blockquote>`,1);function pn(cn,rn){const a=l("ExternalLinkIcon");return p(),i("div",null,[r,d,n("p",null,[n("a",u,[s("https://github.com/Tandayuan/elementui-autoAddComponent-study"),e(a)])]),k,n("p",null,[n("a",h,[s("process对象"),e(a)])]),n("p",null,[n("a",b,[s("Makefile入门了解"),e(a)])]),n("p",null,[n("a",m,[s("原文地址"),e(a)])]),n("p",null,[n("strong",null,[s("重点查看："),n("a",_,[s("前端文件操作 File, Blob, ArrayBuffer 以及FileReader"),e(a)])])]),n("p",null,[n("a",f,[s("你不知道的 Blob"),e(a)])]),n("p",null,[n("a",v,[s("ArrayBuffer与Unit8Array的基础知识"),e(a)])]),n("p",null,[g,s("："),n("a",x,[s("一文看懂ASCII,UNICODE,UTF8编码规则"),e(a)])]),n("p",null,[n("a",j,[s("常见编码问题解惑"),e(a)])]),S,n("ul",null,[n("li",null,[n("p",null,[n("a",w,[s("fs 文件系统 | Node.js v20.2.0 文档 (nodejs.cn)"),e(a)])]),y]),F]),B,n("ul",null,[n("li",null,[n("p",null,[n("a",I,[s("文件(File)"),e(a)]),s("：")]),n("blockquote",null,[n("p",null,[s("文件（"),A,s("）接口提供有关文件的信息，并允许网页中的 JavaScript 访问其内容。"),z,s(" 接口也继承了 "),n("a",C,[U,e(a)]),s(" 接口的属性和方法。"),q,s(" 对象是特殊类型的 "),n("a",N,[P,e(a)]),s("；File对象通常情况下来自于用户在input[type=file]的标签上选择文件后返回的对象。")])])]),n("li",null,[n("p",null,[n("a",T,[s("Blob"),e(a)]),s("：")]),n("blockquote",null,[n("p",null,[s("表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取。二进制的格式可以让Window电脑读取到；它可以转换成 "),n("a",W,[E,e(a)]),s(" 来用于数据操作。要获取用户文件系统上的文件对应的 "),D,s(" 对象，请参阅 "),n("a",J,[K,e(a)]),s(" 文档。")])])]),n("li",null,[n("p",null,[n("a",M,[s("流(Stream)"),e(a)]),s("：")]),n("blockquote",null,[G,n("p",null,[V,n("a",L,[s("关于流的代码示例，理解会更深刻。"),e(a)])])])])]),O,n("ul",null,[Q,n("li",null,[s("参考文章："),n("a",R,[s("Base64、Blob、File 三种类型的相互转换 最详细"),e(a)])])]),X,n("blockquote",null,[$,H,n("p",null,[n("a",Y,[s("一文看懂ASCII,UNICODE,UTF8编码规则"),e(a)])])]),n("blockquote",null,[Z,nn,sn,n("p",null,[s("Unicode 转换格式 (UTF) 是从每个 Unicode 码位（代理代码点除外）到唯一字节序列的算法映射。我的理解是，utf-8的算法解析Unicode的码位变成二进制位数据，再把这些数据以8位组成单个字节以及utf-8的其他算法组成唯一字节序列。（utf-8的算法映射详解："),n("a",an,[s("一文看懂ASCII,UNICODE,UTF8编码规则"),e(a)]),s("）")])]),en,n("blockquote",null,[tn,n("p",null,[n("a",on,[s("file-save官方文档"),e(a)])])]),ln])}const kn=o(c,[["render",pn],["__file","index.html.vue"]]);export{kn as default};
