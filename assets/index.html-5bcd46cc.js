import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as n,a as e,b as i,d as t,f as c}from"./app-0df26c27.js";const d="/tdy-blogs/assets/Snipaste_2023-03-30_15-57-55-bd284c36.png",r="/tdy-blogs/assets/image-20230330161007461-a1a884d4.png",g="/tdy-blogs/assets/image-20230330164245894-5a7d94e4.png",p="/tdy-blogs/assets/image-20230330164442343-a3463340.png",m="/tdy-blogs/assets/image-20230330164533045-947d8055.png",h="/tdy-blogs/assets/image-20230330163620306-3409bcf0.png",u="/tdy-blogs/assets/image-20230330165115017-9b5016c9.png",b="/tdy-blogs/assets/image-20230330165143979-24cc724b.png",f="/tdy-blogs/assets/image-20230330170150601-c29c038c.png",_="/tdy-blogs/assets/image-20230330171216643-98080dc6.png",k="/tdy-blogs/assets/image-20230330171336475-bd546981.png",x="/tdy-blogs/assets/image-20230330172556696-18536777.png",y="/tdy-blogs/assets/image-20230330173231741-d2ceb6be.png",z="/tdy-blogs/assets/image-20230330173621175-5fd0a75d.png",v={},w=e("h1",{id:"学习和分析koa洋葱模型的实现",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#学习和分析koa洋葱模型的实现","aria-hidden":"true"},"#"),i(" 学习和分析Koa洋葱模型的实现")],-1),j=e("h2",{id:"仓库地址",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#仓库地址","aria-hidden":"true"},"#"),i(" 仓库地址")],-1),F={href:"https://github.com/Tandayuan/koa-simple-study",target:"_blank",rel:"noopener noreferrer"},P=e("h2",{id:"参考文章、仓库",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考文章、仓库","aria-hidden":"true"},"#"),i(" 参考文章、仓库")],-1),q={href:"https://juejin.cn/post/7005375860509245471#heading-11",target:"_blank",rel:"noopener noreferrer"},T={href:"https://juejin.cn/post/7160681567348588580/#heading-6",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/lxchuan12/koa-compose-analysis",target:"_blank",rel:"noopener noreferrer"},V=c(`<h2 id="学习目标" tabindex="-1"><a class="header-anchor" href="#学习目标" aria-hidden="true">#</a> 学习目标</h2><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 学习克隆和保留 <code>compose</code> 仓库的 <code>git</code> 记录</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 调试和分析koa-compose代码</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 学习高阶函数概念</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> 学习手动创建调试配置文件luaunch.json</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-4" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-4"> 比较node的promisify模式与koa洋葱模型的相似点</label></li></ul><h2 id="学习克隆和保留-compose-仓库的-git-记录" tabindex="-1"><a class="header-anchor" href="#学习克隆和保留-compose-仓库的-git-记录" aria-hidden="true">#</a> 学习克隆和保留 <code>compose</code> 仓库的 <code>git</code> 记录</h2><ol><li><p>git上新建一个仓库</p></li><li><p>clone到本地，在仓库目录打开git命令窗口操作</p></li><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git subtree add --prefix=compose https://github.com/lxchuan12/koa-compose-analysis
## 解读：本地仓库目录新建一个compose文件夹，克隆目标仓库的代码到compose中。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="调试和分析koa-compose代码" tabindex="-1"><a class="header-anchor" href="#调试和分析koa-compose代码" aria-hidden="true">#</a> 调试和分析koa-compose代码</h2><blockquote><p>目的：理解洋葱模型的执行流程和好处</p></blockquote><h3 id="调试should-work测试用例" tabindex="-1"><a class="header-anchor" href="#调试should-work测试用例" aria-hidden="true">#</a> 调试should work测试用例</h3><ul><li><p>package.json开启jest的调试，被测试的it/test对象后增加only可以只对当前用例调试，避免其他用例干扰。</p><figure><img src="`+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>调试<code>should work</code>用例，在<code>await compose(stack)({})</code>提前打好断点，F11进入源代码调试。</p></li><li><p>跳转到<code>index.js</code> 在33行打断点再F5跳到指定位置，可以跳过校验数组元素类型的循环。</p><figure><img src="'+r+'" alt="image-20230330161007461" tabindex="0" loading="lazy"><figcaption>image-20230330161007461</figcaption></figure></li><li><p>在<code>return *Promise*.resolve(fn(*context*, dispatch.bind(null, *i* + 1)))</code>打个断点，F5跳转到断点处，再F11单步调试跟踪代码执行。</p></li><li><p>跟踪到第一个中间件函数，一直往下执行到24行的next()，F11单步调试跟踪。</p><figure><img src="'+g+'" alt="image-20230330164245894" tabindex="0" loading="lazy"><figcaption>image-20230330164245894</figcaption></figure><ul><li><p>可以看出next()执行的就是dispatch()，i的值是1。</p><figure><img src="'+p+'" alt="image-20230330164442343" tabindex="0" loading="lazy"><figcaption>image-20230330164442343</figcaption></figure></li><li><p>得出结论：执行middleware数组中的中间件函数，将dispatch高阶函数的参数预设为i+1，目的是准备好中间件数组索引是i+1的函数，等待每个中间件函数的第二个参数next调用。触发dispatch(i+1)，依次类推，像一个递归的行为。</p><figure><img src="'+m+'" alt="image-20230330164533045" tabindex="0" loading="lazy"><figcaption>image-20230330164533045</figcaption></figure></li></ul></li><li><p>按照上一步骤的调试方法进行剩余的调试。</p></li><li><p>调试完这个测试用例后得出源码结论：</p><figure><img src="'+h+'" alt="image-20230330163620306" tabindex="0" loading="lazy"><figcaption>image-20230330163620306</figcaption></figure></li><li><p>通过调试发现代码的执行流程是如下的：</p><p>类似于一个洋葱的形状，代码是由外到内执行，执行完成后再由内到外执行剩下的代码。</p><figure><img src="'+u+'" alt="image-20230330165115017" tabindex="0" loading="lazy"><figcaption>image-20230330165115017</figcaption></figure></li></ul><figure><img src="'+b+'" alt="image-20230330165143979" tabindex="0" loading="lazy"><figcaption>image-20230330165143979</figcaption></figure><ul><li>由下图分析可知，由外到内依次执行上半区的代码再由内到外执行下半区的代码，形成一个洋葱模型</li></ul><figure><img src="'+f+'" alt="image-20230330170150601" tabindex="0" loading="lazy"><figcaption>image-20230330170150601</figcaption></figure><h3 id="调试should-throw-if-next-is-called-multiple-times测试用例" tabindex="-1"><a class="header-anchor" href="#调试should-throw-if-next-is-called-multiple-times测试用例" aria-hidden="true">#</a> 调试should throw if next() is called multiple times测试用例</h3><ul><li><p>断点第二个next()，模拟多次执行next</p><figure><img src="'+_+'" alt="image-20230330171216643" tabindex="0" loading="lazy"><figcaption>image-20230330171216643</figcaption></figure><p>ps：开启断点调试后再往next断点，F5使小黄标指在next前再F11才能进到源码调试查看。</p></li></ul><figure><img src="'+k+'" alt="image-20230330171336475" tabindex="0" loading="lazy"><figcaption>image-20230330171336475</figcaption></figure><ul><li>第一次调用next更新了index的值，当多次调用next，会抛出对应错误。<img src="'+x+'" alt="image-20230330172556696" loading="lazy"></li></ul><h3 id="调试should-catch-downstream-errors测试用例" tabindex="-1"><a class="header-anchor" href="#调试should-catch-downstream-errors测试用例" aria-hidden="true">#</a> 调试should catch downstream errors测试用例</h3><ul><li>下游中间件函数报错的时候上游可以捕获到<img src="'+y+'" alt="image-20230330173231741" loading="lazy"></li></ul><figure><img src="'+z+'" alt="image-20230330173621175" tabindex="0" loading="lazy"><figcaption>image-20230330173621175</figcaption></figure><h2 id="学习高阶函数概念" tabindex="-1"><a class="header-anchor" href="#学习高阶函数概念" aria-hidden="true">#</a> 学习高阶函数概念</h2><blockquote><p>高阶函数是一个可以接收函数作为参数，甚至返回一个函数的函数。 它就像常规函数一样，只是多了接收和返回其他函数的附加能力，即参数和输出。</p></blockquote>',20),B={href:"https://zhuanlan.zhihu.com/p/49579052",target:"_blank",rel:"noopener noreferrer"},C=e("h2",{id:"比较node的promisify模式与koa洋葱模型的相似点",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#比较node的promisify模式与koa洋葱模型的相似点","aria-hidden":"true"},"#"),i(" 比较node的promisify模式与koa洋葱模型的相似点")],-1),E=e("p",null,"node promisify小用例的代码链接：",-1),I={href:"https://github.com/Tandayuan/remote-git-tags-study/tree/8342438ad589c8dd6b5ca7a590ea35b8b98f4534/src/promisify",target:"_blank",rel:"noopener noreferrer"},L=e("p",null,"其中：",-1),S=e("p",null,"testPromisifyCase.html 是实际例子",-1),K=e("p",null,"main.ts 实现Promisify的源码",-1),A=e("p",null,"loadImage.js 符合Promisify规范的函数",-1),D=e("p",null,"promisify的作用是将一个包含回调或者异步的函数转换为以async await的形式执行的函数。转换后的函数可以等待函数内的回调或者异步的函数执行完毕再同步继续执行上下文环境中的代码。具体的例子看testPromisifyCase.html。",-1),G=e("ul",null,[e("li",null,"相似点：都是利用Promise 和 async await串行同步执行异步函数，都可以捕获下游函数的错误。")],-1);function H(J,M){const a=o("ExternalLinkIcon");return l(),n("div",null,[w,j,e("p",null,[e("a",F,[i("https://github.com/Tandayuan/koa-simple-study"),t(a)])]),P,e("blockquote",null,[e("ul",null,[e("li",null,[i("参考文章1："),e("a",q,[i("若川-50行代码串行Promise，koa洋葱模型原来是这么实现？"),t(a)])]),e("li",null,[i("参考文章2："),e("a",T,[i("https://juejin.cn/post/7160681567348588580/#heading-6"),t(a)])]),e("li",null,[i("模板仓库："),e("a",N,[i("https://github.com/lxchuan12/koa-compose-analysis"),t(a)])])])]),V,e("ul",null,[e("li",null,[e("a",B,[i("高阶函数概念"),t(a)])])]),C,e("blockquote",null,[E,e("p",null,[e("a",I,[i("https://github.com/Tandayuan/remote-git-tags-study/tree/8342438ad589c8dd6b5ca7a590ea35b8b98f4534/src/promisify"),t(a)])]),L,S,K,A,D]),G])}const R=s(v,[["render",H],["__file","index.html.vue"]]);export{R as default};
