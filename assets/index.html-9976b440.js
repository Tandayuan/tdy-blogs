import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as p,c,a as s,b as n,d as e,f as t}from"./app-040d6999.js";const i={},r=s("h2",{id:"仓库地址",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#仓库地址","aria-hidden":"true"},"#"),n(" 仓库地址")],-1),d={href:"https://github.com/Tandayuan/clipboard-study",target:"_blank",rel:"noopener noreferrer"},u=s("h2",{id:"学习参考",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#学习参考","aria-hidden":"true"},"#"),n(" 学习参考")],-1),k={href:"https://github.com/zenorocha/clipboard.js",target:"_blank",rel:"noopener noreferrer"},m=t('<h2 id="学习目标" tabindex="-1"><a class="header-anchor" href="#学习目标" aria-hidden="true">#</a> 学习目标</h2><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 理解ts的<code>namespace</code> <code>declare</code>及应用</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 理解ts的<code>模块</code>概念</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 理解一些陌生的dom/bomApi, 例：<code>window.scrollY</code> <code>document.documentElement.scrollTop</code> <code>document.dir</code> <code>document.execCommand</code> <code>document.queryCommandSupported()</code> <code>HTMLInputElement.select()</code> <code>HTMLInputElement.setSelectionRange()</code></label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-3"><code>tsconfig.json</code>常用配置理解</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-4" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-4"> 项目的实现思路</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-5" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-5"> 学习js选中一段文本 Selection和Range知识的应用</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-6" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-6"> 应用自定义事件的订阅和派发</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-7" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-7"> ts中<code>class</code>的类型定义和应用</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-8" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-8"> 移除事件监听器的另一种实现方式</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-9" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-9"> vite+ts+jest环境配置项目路径别名</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-10" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-10"> 了解ts关于<code>class</code>类型语法</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-11" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-11"> 学习jest操作dom</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-12" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-12"> 学习jest的配置，进行单个测试模块</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-13" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-13"> 学习github的markdown指南</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-14" disabled="disabled"><label class="task-list-item-label" for="task-item-14"> ts声明文件的生成配置以及发布npm包后的引用配置</label></li></ul><h2 id="实现思路" tabindex="-1"><a class="header-anchor" href="#实现思路" aria-hidden="true">#</a> 实现思路</h2><ul><li>构造一个类，触发元素与它的实例对象绑定。触发元素通过<code>data-xx</code>属性标识自定义属性。</li><li>自定义属性定义了目标元素、目标文字、活动类型的字段属性。触发元素派发点击事件，可以获取到目标元素中文本的内容。目标文字是一段预设好的文本，触发元素派发点击事件就能获取。活动类型字段决定了是复制/剪切行为。</li></ul><h2 id="namespace-declare的理解" tabindex="-1"><a class="header-anchor" href="#namespace-declare的理解" aria-hidden="true">#</a> <code>namespace</code> <code>declare</code>的理解</h2>',5),b={href:"https://vue3js.cn/interview/typescript/namespace_module.html",target:"_blank",rel:"noopener noreferrer"},h=s("li",null,[n("理解"),s("code",null,"namespace"),n(": 命名空间一般用于解决标识符的重名问题，ts项目中正常开发不会用到，大多用于"),s("code",null,"*.d.ts"),n("的标记文件。")],-1),v=s("code",null,"declare",-1),g=s("code",null,"*.d.ts",-1),q={href:"https://www.runoob.com/typescript/ts-ambient.html",target:"_blank",rel:"noopener noreferrer"},y=s("h2",{id:"ts的模块概念",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#ts的模块概念","aria-hidden":"true"},"#"),n(" ts的"),s("code",null,"模块"),n("概念")],-1),_=s("li",null,[n("理解：ts文件中的变量、函数等标识符前没有"),s("code",null,"export"),n("声明，会被当做全局标识符看待，在另一个文件引用相同名称时就会引发错误。"),s("br"),n(" ts文件应当被当成一个模块去引用，防止以上情况出现。")],-1),f={href:"https://vue3js.cn/interview/typescript/namespace_module.html",target:"_blank",rel:"noopener noreferrer"},x=t(`<h2 id="tsconfig-json常用配置理解" tabindex="-1"><a class="header-anchor" href="#tsconfig-json常用配置理解" aria-hidden="true">#</a> <code>tsconfig.json</code>常用配置理解</h2><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
<span class="token comment">// target 的配置将会改变哪些 JS 特性会被降级，而哪些会被完整保留 例如，如果 target 是 ES5 或更低版本，箭头函数 () =&gt; this 会被转换为等价的 函数 表达式。</span>
    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ESNext&quot;</span><span class="token punctuation">,</span>
<span class="token comment">// TypeScript 包括一组默认的内建 JS 接口（例如 Math）的类型定义，以及在浏览器环境中存在的对象的类型定义（例如 document）。 TypeScript 还包括与你指定的 target 选项相匹配的较新的 JS 特性的 API。例如如果target 为 ES6 或更新的环境，那么 Map 的类型定义是可用的。</span>
    <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;ESNext&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DOM&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token comment">// 此标志用作迁移到即将推出的类字段标准版本的一部分。也就是使用ECMA制定的Class特性的版本。</span>
    <span class="token property">&quot;useDefineForClassFields&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token comment">// 设置程序的模块系统;ESNext目前使用的是ESModule;</span>
    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ESNext&quot;</span><span class="token punctuation">,</span>
<span class="token comment">// 指定模块解析策略，TS文件中的导入导出行为将会按照Node的规范来解析。例：import m from &#39;mitt-study&#39; ts会寻找node_modules文件夹下的相关依赖。</span>
    <span class="token property">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Node&quot;</span><span class="token punctuation">,</span>
<span class="token comment">// strict 标志启用范围广泛的类型检查行为，从而更强有力地保证程序的正确性。</span>
    <span class="token property">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token comment">// 启用生成 sourcemap files</span>
    <span class="token property">&quot;sourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token comment">// ts文件模块允许导入.json后缀的文件</span>
    <span class="token property">&quot;resolveJsonModule&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token comment">// https://www.typescriptlang.org/zh/tsconfig#isolatedModules 暂时不理解，暂时理解为配合vite而启用的一个字段。</span>
    <span class="token property">&quot;isolatedModules&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token comment">// esModuleInterop为false时，在ts使用esmodule的导入/导出模块，在ts编译后这个模块会被当作CommonJS/AMD/UMD对待，导致一些规范和语法上的错误。开启后，esmodule可以在编译后修复规范和语法上的错误。</span>
<span class="token comment">// 参考：https://www.typescriptlang.org/zh/tsconfig#esModuleInterop</span>
    <span class="token property">&quot;esModuleInterop&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token comment">// 禁止ts编译器生成文件，例如 JavaScript 代码，source-map 或声明。生成文件的功能交由其他工具实现，例如：vite。ts编译器只做为提供编辑器集成的工具或者对源码进行类型检查的工具。</span>
    <span class="token property">&quot;noEmit&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token comment">// 报告未使用的局部变量的错误。</span>
    <span class="token property">&quot;noUnusedLocals&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token comment">// 报告函数中未使用参数的错误。</span>
    <span class="token property">&quot;noUnusedParameters&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token comment">// 启用后，TypeScript 将检查函数中的所有代码路径以确保它们返回值。</span>
    <span class="token property">&quot;noImplicitReturns&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token comment">// 跳过声明文件(*.d.ts)的类型检查。</span>
    <span class="token property">&quot;skipLibCheck&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/**/*.ts&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tests/**/*.test.ts&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;**.ts&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="js选中一段文本-涉及-selection和range知识的应用" tabindex="-1"><a class="header-anchor" href="#js选中一段文本-涉及-selection和range知识的应用" aria-hidden="true">#</a> js选中一段文本 涉及：Selection和Range知识的应用</h2>`,3),j={href:"https://juejin.cn/post/7047022519294885924",target:"_blank",rel:"noopener noreferrer"},S={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/createRange",target:"_blank",rel:"noopener noreferrer"},w={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Selection/addRange",target:"_blank",rel:"noopener noreferrer"},C=s("li",null,[s("p",null,"思路：选区对象(Selection)中手动增加一个区域(selection.addRange(Range))，区域对象(Range)中设置选中一段目标文本(document.createRange())。")],-1),M=s("h2",{id:"陌生的dom-bomapi",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#陌生的dom-bomapi","aria-hidden":"true"},"#"),n(" 陌生的dom/bomApi")],-1),E=s("li",null,[s("p",null,[s("code",null,"window.scrollY"),n(),s("code",null,"document.documentElement.scrollTop"),n("："),s("code",null,"pageYOffset"),n(" 属性是 "),s("code",null,"scrollY"),n(" 属性的别名，都是返回当前页面的滚动条纵坐标位置。没有纵向滚动条时为0")])],-1),T=s("li",null,[s("p",null,[s("code",null,"document.dir"),n(" ：Document.dir 的本质是 DOMString，代表了文档的文字朝向，是从左到右 (默认) 还是从右到左。'rtl'(right to left) 代表从右到左，'ltr'(left to right) 代表从左到右。")])],-1),D=s("code",null,"document.execCommand",-1),I={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand",target:"_blank",rel:"noopener noreferrer"},N=t("<li><p><code>document.queryCommandSupported()</code>：</p></li><li><p><code>HTMLInputElement.select()</code>：HTMLInputElement.select() 方法选中一个 <code>&lt;textarea&gt;</code> 元素或者一个带有 text 字段的 <code>&lt;input&gt;</code> 元素里的所有内容。</p></li><li><p><code>HTMLInputElement.setSelectionRange()</code>：HTMLInputElement.setSelectionRange 方法用于设定<code>&lt;input&gt;</code> 或 <code>&lt;textarea&gt;</code> 元素中当前选中文本的起始和结束位置。<code>setSelectionRange</code> 方法只能应用于type为文本、搜索、链接、电话号码和密码的输入。</p></li><li><p><code>HTMLInputElement.select()</code>与<code>HTMLInputElement.setSelectionRange()</code>区别：前者只能全选、后者可以指定起始与结束的索引选中</p></li><li><p><code>document.queryCommandSupported()</code>：Document.queryCommandSupported() 方法确定浏览器是否支持指定的编辑指令。</p></li>",5),L=t(`<h2 id="移除事件监听器的另一种实现方式" tabindex="-1"><a class="header-anchor" href="#移除事件监听器的另一种实现方式" aria-hidden="true">#</a> 移除事件监听器的另一种实现方式</h2><ul><li><p>添加事件监听器时，第三个参数对象中加入<code>signal </code>字段，字段值是<code>AbortSignal</code>对象，通过<code>AbortController</code>对象的属性生成。移除事件监听器，调用<code>AbortController</code>对象的<code>abort()</code>即可。</p></li><li><p>代码片段：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 添加事件监听器</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>abortController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
triggerElement<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    signal<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>abortController<span class="token punctuation">.</span>signal
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 移除事件监听器</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>abortController<span class="token operator">?.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="vite-ts-jest环境配置项目路径别名" tabindex="-1"><a class="header-anchor" href="#vite-ts-jest环境配置项目路径别名" aria-hidden="true">#</a> vite+ts+jest环境配置项目路径别名</h2><ul><li><p>编译阶段识别路径别名：配置<code>tsconfig.json</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;@/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">&quot;lib/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;lib/*&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>打包阶段识别路径别名：配置<code>vite.config.ts</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
    resolve<span class="token operator">:</span> <span class="token punctuation">{</span>
      alias<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;@&quot;</span><span class="token operator">:</span> <span class="token function">_resolve</span><span class="token punctuation">(</span><span class="token string">&quot;src&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lib<span class="token operator">:</span> <span class="token function">_resolve</span><span class="token punctuation">(</span><span class="token string">&quot;lib&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>测试阶段识别路径别名：配置<code>jest.config.cjs</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">moduleNameMapper</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;^@/(.*)$&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;rootDir&gt;/src/$1&quot;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;^lib/(.*)$&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;rootDir&gt;/lib/$1&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="jest配置选项学习" tabindex="-1"><a class="header-anchor" href="#jest配置选项学习" aria-hidden="true">#</a> jest配置选项学习</h2>`,5),R={href:"https://qastack.cn/programming/42827054/how-do-i-run-a-single-test-using-jest",target:"_blank",rel:"noopener noreferrer"},z=s("h2",{id:"了解tsclass语法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#了解tsclass语法","aria-hidden":"true"},"#"),n(" 了解ts"),s("code",null,"class"),n("语法")],-1),A={href:"https://www.typescriptlang.org/docs/handbook/2/classes.html",target:"_blank",rel:"noopener noreferrer"},J=s("h2",{id:"学习github的markdown指南",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#学习github的markdown指南","aria-hidden":"true"},"#"),n(" 学习github的markdown指南")],-1),H=s("blockquote",null,[s("p",null,"tips：除了markdown知识外还有很多关于github的知识可以学习")],-1),O={href:"https://docs.github.com/zh/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax",target:"_blank",rel:"noopener noreferrer"},P=t(`<h2 id="ts声明文件的生成配置以及发布npm包后的引用配置" tabindex="-1"><a class="header-anchor" href="#ts声明文件的生成配置以及发布npm包后的引用配置" aria-hidden="true">#</a> ts声明文件的生成配置以及发布npm包后的引用配置</h2><blockquote><p>package.json 关键配置解析</p></blockquote><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./types/main.d.ts&quot;</span><span class="token punctuation">,</span> <span class="token comment">// npm寻找库声明文件的入口</span>
<span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;dist_lib&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 打包后的库文件夹</span>
    <span class="token string">&quot;types&quot;</span> <span class="token comment">// 声明文件文件夹</span>
    <span class="token comment">// 以上都表示在根目录上的文件夹</span>
 <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./types/main.d.ts&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 声明文件导入指向路径</span>
    <span class="token property">&quot;import&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist_lib/tdyClipboard.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// esModule导入指向路径</span>
    <span class="token property">&quot;require&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist_lib/tdyClipboard.umd.cjs&quot;</span> <span class="token comment">// commonJs导入指向路径</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;buildDeclaration&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tsc --project tsconfig.lib.json&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 运行tsconfig.lib.json导出项目声明文件夹</span>
    <span class="token property">&quot;buildLib&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tsc &amp;&amp; vite build --mode lib &amp;&amp; pnpm run buildDeclaration&quot;</span> <span class="token comment">// 顺序执行：检查ts所有文件是否可以通过编译 &amp;&amp; vite构建打包 &amp;&amp; 执行buildDeclaration脚本</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>tsconfig.lib.json</p></blockquote><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./tsconfig.json&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 继承tsconfig.json的配置</span>
    <span class="token comment">// 以下配置覆盖继承的相同字段的配置 等同于 Object.assign(tsconfig.json, 以下配置)</span>
    <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;noEmit&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 编译完成后能够生成js文件、声明文件等</span>
        <span class="token property">&quot;emitDeclarationOnly&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 应用此配置编译后只会生成声明文件</span>
        <span class="token property">&quot;declaration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 允许生成声明文件</span>
        <span class="token property">&quot;declarationDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./types&quot;</span> <span class="token comment">// 声明文件存放在根目录的types文件夹中</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;lib/**/*.ts&quot;</span><span class="token punctuation">]</span> <span class="token comment">// 只编译生成include指定的声明文件</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="发布库包到npm" tabindex="-1"><a class="header-anchor" href="#发布库包到npm" aria-hidden="true">#</a> 发布库包到npm</h2><blockquote><p>配置好以上配置文件后，执行<code>pnpm buildLib </code>会生成<code>types</code>、<code>dist_lib</code>两个文件夹。</p><p>执行以下命令：</p><ul><li><code>npm version patch</code> package.json里的version自增一位并commit到git的暂存区</li><li><code>npm login</code> 登录npm</li><li><code>npm publish</code> 发布npm包</li></ul></blockquote>`,7);function U(V,W){const a=l("ExternalLinkIcon");return p(),c("div",null,[r,s("p",null,[s("a",d,[n("https://github.com/Tandayuan/clipboard-study"),e(a)])]),u,s("ul",null,[s("li",null,[n("参考仓库地址："),s("a",k,[n("https://github.com/zenorocha/clipboard.js"),e(a)])])]),m,s("ul",null,[s("li",null,[n("参考文章："),s("a",b,[n("https://vue3js.cn/interview/typescript/namespace_module.html"),e(a)])]),h,s("li",null,[n("理解"),v,n(": 一般定义在"),g,n("标记文件里。参考文章："),s("a",q,[n("TypeScript 作为 JavaScript 的超集，在开发过程中不可避免要引用其他第三方的 JavaScript 的库。虽然通过直接引用可以调用库的类和方法，但是却无法使用TypeScript 诸如类型检查等特性功能。为了解决这个问题，需要将这些库里的函数和方法体去掉后只保留导出类型声明，而产生了一个描述 JavaScript 库和模块信息的声明文件。通过引用这个声明文件，就可以借用 TypeScript 的各种特性来使用库文件了"),e(a)])])]),y,s("ul",null,[_,s("li",null,[n("参考文章："),s("a",f,[n("https://vue3js.cn/interview/typescript/namespace_module.html"),e(a)])])]),x,s("ul",null,[s("li",null,[s("p",null,[n("参考文章："),s("a",j,[n("https://juejin.cn/post/7047022519294885924"),e(a)])])]),s("li",null,[s("p",null,[s("a",S,[n("MDN：创造区域"),e(a)])])]),s("li",null,[s("p",null,[s("a",w,[n("MDN：选区中增加区域"),e(a)])])]),C]),M,s("ul",null,[E,T,s("li",null,[s("p",null,[D,n(" ：执行一些dom特有的命令，如复制/剪切。详情："),s("a",I,[n("https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand"),e(a)])])]),N]),L,s("ul",null,[s("li",null,[s("a",R,[n("参考文章的评论"),e(a)])])]),z,s("p",null,[s("a",A,[n("ts相关文档"),e(a)])]),J,H,s("p",null,[s("a",O,[n("学习链接"),e(a)])]),P])}const B=o(i,[["render",U],["__file","index.html.vue"]]);export{B as default};
