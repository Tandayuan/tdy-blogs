import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as l,c as r,a as e,b as i,d as n,f as s}from"./app-f4ba14bb.js";const d="/tdy-blogs/assets/image-20230712152031994-8645d2ac.png",c="/tdy-blogs/assets/image-20230712151022408-75df387b.png",h="/tdy-blogs/assets/image-20230712151043305-8998518b.png",m="/tdy-blogs/assets/image-20230712151136089-9dddf80f.png",u="/tdy-blogs/assets/image-20230712151144246-c63faba5.png",p="/tdy-blogs/assets/image-20230712151232940-c11a9c45.png",k="/tdy-blogs/assets/image-20230712151213521-ed739f1c.png",g="/tdy-blogs/assets/image-20230712155717546-acd224a5.png",_="/tdy-blogs/assets/image-20230712155902793-ee097ba1.png",b="/tdy-blogs/assets/image-20230712155921142-e3509595.png",f="/tdy-blogs/assets/image-20230712160212074-62692023.png",x="/tdy-blogs/assets/image-20230712160223433-67ef022b.png",y={},j=e("h2",{id:"仓库地址",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#仓库地址","aria-hidden":"true"},"#"),i(" 仓库地址")],-1),D={href:"https://github.com/Tandayuan/docker-jenkins-study",target:"_blank",rel:"noopener noreferrer"},v=s('<h2 id="学习目标" tabindex="-1"><a class="header-anchor" href="#学习目标" aria-hidden="true">#</a> 学习目标</h2><p><strong>学习环境：WSL2的Ubuntu</strong></p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> Docker、Docker-Compose安装与使用；</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> Docker构建Jenkins容器和使用；</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> Docker+Jenkins实现自动化部署前端项目；</label></li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',4),J={href:"https://docs.docker.com/engine/install/ubuntu/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://docs.docker.com/compose/install/linux/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://blog.csdn.net/qq_32352777/article/details/109267847",target:"_blank",rel:"noopener noreferrer"},z={href:"https://www.digitalocean.com/community/questions/docker-lib-x86_64-linux-gnu-libc-so-6-version-glibc_2-32-not-found-required-by-docker-how-to-solve",target:"_blank",rel:"noopener noreferrer"},L={href:"https://juejin.cn/post/6967243012199940110#heading-8",target:"_blank",rel:"noopener noreferrer"},q=s('<h2 id="docker、docker-compose安装与使用" tabindex="-1"><a class="header-anchor" href="#docker、docker-compose安装与使用" aria-hidden="true">#</a> Docker、Docker-Compose安装与使用</h2><ul><li>安装参照<a href="#参考资料">参考资料</a>中的官方文档链接</li><li>查看是否安装成功：<code>docker version</code> <code>docker compose version</code></li></ul><h2 id="docker构建jenkins容器和使用" tabindex="-1"><a class="header-anchor" href="#docker构建jenkins容器和使用" aria-hidden="true">#</a> Docker构建Jenkins容器和使用</h2><blockquote><p>构建Jenkins源码参考<code>my_jenkins_build</code>文件夹中的文件；</p><p>请在Linux Ubuntu环境中按照以下步骤进行操作；</p><p>compose.yaml文件中</p><figure><img src="'+d+`" alt="image-20230712152031994" tabindex="0" loading="lazy"><figcaption>image-20230712152031994</figcaption></figure><p><code>/home/tandayuan/jenkins_home</code>替换为真实Linux下的路径</p></blockquote><h3 id="复制win11jenkins构建目录到linux的指定目录命令操作过程" tabindex="-1"><a class="header-anchor" href="#复制win11jenkins构建目录到linux的指定目录命令操作过程" aria-hidden="true">#</a> 复制win11Jenkins构建目录到Linux的指定目录命令操作过程</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>root@TanLAPTOP:/home/tandayuan<span class="token comment">## cp /mnt/d/tempDir/docker-jenkins-study/my_jenkins_build .</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="构建jenkins镜像——dockerfile" tabindex="-1"><a class="header-anchor" href="#构建jenkins镜像——dockerfile" aria-hidden="true">#</a> 构建Jenkins镜像——Dockerfile</h3><p><a href="./my_jenkins_build/Dockerfile">点击打开Dockerfile查看详解</a></p><h3 id="通过docker-compose启动jenkins镜像容器——compose-yaml" tabindex="-1"><a class="header-anchor" href="#通过docker-compose启动jenkins镜像容器——compose-yaml" aria-hidden="true">#</a> 通过Docker Compose启动Jenkins镜像容器——compose.yaml</h3><p><a href="./my_jenkins_build/compose.yaml">点击打开compose.yaml查看详解</a></p>`,10),T={id:"sh脚本一键构建镜像和启动容器并成功访问jekins——autobuild-sh",tabindex:"-1"},P=e("a",{class:"header-anchor",href:"#sh脚本一键构建镜像和启动容器并成功访问jekins——autobuild-sh","aria-hidden":"true"},"#",-1),C={href:"http://autoBuild.sh",target:"_blank",rel:"noopener noreferrer"},N={href:"http://autoBuild.sh",target:"_blank",rel:"noopener noreferrer"},V=e("p",null,[e("a",{href:"./my_jenkins_build/autoBuild.sh"},"点击打开autoBuild.sh查看详解")],-1),A=e("h3",{id:"jenkins的简单使用",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#jenkins的简单使用","aria-hidden":"true"},"#"),i(" Jenkins的简单使用")],-1),E=e("li",null,[e("p",null,"目标：输出简单的Hello World")],-1),O=e("code",null,"./autoBuild.sh",-1),U={href:"http://localhost:8085",target:"_blank",rel:"noopener noreferrer"},G=s('<li><p>步骤：</p><ul><li><figure><img src="'+c+'" alt="image-20230712151022408" tabindex="0" loading="lazy"><figcaption>image-20230712151022408</figcaption></figure></li><li><figure><img src="'+h+'" alt="image-20230712151043305" tabindex="0" loading="lazy"><figcaption>image-20230712151043305</figcaption></figure></li><li><figure><img src="'+m+'" alt="image-20230712151136089" tabindex="0" loading="lazy"><figcaption>image-20230712151136089</figcaption></figure></li><li><figure><img src="'+u+'" alt="image-20230712151144246" tabindex="0" loading="lazy"><figcaption>image-20230712151144246</figcaption></figure></li><li><figure><img src="'+p+'" alt="image-20230712151232940" tabindex="0" loading="lazy"><figcaption>image-20230712151232940</figcaption></figure></li><li><figure><img src="'+k+'" alt="image-20230712151213521" tabindex="0" loading="lazy"><figcaption>image-20230712151213521</figcaption></figure></li></ul></li>',1),I=s(`<h2 id="docker-jenkins实现自动化部署前端项目" tabindex="-1"><a class="header-anchor" href="#docker-jenkins实现自动化部署前端项目" aria-hidden="true">#</a> Docker+Jenkins实现自动化部署前端项目</h2><blockquote><p>基于上一章节成功打开Jenkins后继续学习本章节</p></blockquote><h3 id="复制win11前端项目demo到linux的jenkins工作区目录命令操作过程" tabindex="-1"><a class="header-anchor" href="#复制win11前端项目demo到linux的jenkins工作区目录命令操作过程" aria-hidden="true">#</a> 复制win11前端项目demo到Linux的Jenkins工作区目录命令操作过程</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>root@TanLAPTOP:/home/tandayuan<span class="token comment">## cp -r /mnt/d/docker-jenkins-study/mg-project ./jenkins_home/workspace/mg-project</span>
root@TanLAPTOP:/home/tandayuan<span class="token comment">## cd ./jenkins_home/workspace/mg-project/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jenkins部署前端demo和运行demo查看效果" tabindex="-1"><a class="header-anchor" href="#jenkins部署前端demo和运行demo查看效果" aria-hidden="true">#</a> Jenkins部署前端Demo和运行Demo查看效果</h3><p>操作步骤：</p><ul><li><p>自定义Jenkins的工作目录：<img src="`+g+'" alt="image-20230712155717546" loading="lazy"></p></li><li><p>指定一键部署脚本：<img src="'+_+'" alt="image-20230712155902793" loading="lazy"></p></li><li><p>执行Jenkins自动部署：<img src="'+b+'" alt="image-20230712155921142" loading="lazy"></p></li><li><p>打开浏览器访问查看效果：<img src="'+f+'" alt="image-20230712160212074" loading="lazy"></p></li></ul><figure><img src="'+x+'" alt="image-20230712160223433" tabindex="0" loading="lazy"><figcaption>image-20230712160223433</figcaption></figure><h3 id="构建前端demo镜像——dockerfile" tabindex="-1"><a class="header-anchor" href="#构建前端demo镜像——dockerfile" aria-hidden="true">#</a> 构建前端Demo镜像——Dockerfile</h3><p><a href="./mg-project/Dockerfile">点击打开</a></p>',10),S={id:"sh脚本一键构建镜像和启动容器并成功访问前端demo——autobuilddocker-sh",tabindex:"-1"},W=e("a",{class:"header-anchor",href:"#sh脚本一键构建镜像和启动容器并成功访问前端demo——autobuilddocker-sh","aria-hidden":"true"},"#",-1),H={href:"http://autoBuildDocker.sh",target:"_blank",rel:"noopener noreferrer"},F=e("p",null,[e("a",{href:"./mg-project/autoBuildDocker.sh"},"点击打开")],-1);function K(M,Q){const a=t("ExternalLinkIcon");return l(),r("div",null,[j,e("p",null,[e("a",D,[i("https://github.com/Tandayuan/docker-jenkins-study"),n(a)])]),v,e("ul",null,[e("li",null,[e("p",null,[e("a",J,[i("Docker安装"),n(a)]),i("、"),e("a",B,[i("DockerCompose安装"),n(a)])])]),e("li",null,[e("p",null,[e("a",w,[i("Jenkins 系列教程-史上最简单Jenkins教程，教你一天学会使用Jenkins利器"),n(a)])])]),e("li",null,[e("p",null,[e("a",z,[i("解决Jenkins官方镜像包在构建Docker任务时报错的BUG"),n(a)])])]),e("li",null,[e("p",null,[e("a",L,[i("jenkins容器内生成 ssh 公钥连接Github"),n(a)])])])]),q,e("h3",T,[P,i(" sh脚本一键构建镜像和启动容器并成功访问Jekins——"),e("a",C,[i("autoBuild.sh"),n(a)])]),e("blockquote",null,[e("p",null,[i("ps：chmod +x "),e("a",N,[i("autoBuild.sh"),n(a)]),i(" 赋予可执行权限")])]),V,A,e("ul",null,[E,e("li",null,[e("p",null,[i("启动脚本"),O,i("，访问"),e("a",U,[i("http://localhost:8085"),n(a)])])]),G]),I,e("h3",S,[W,i(" sh脚本一键构建镜像和启动容器并成功访问前端Demo——"),e("a",H,[i("autoBuildDocker.sh"),n(a)])]),F])}const Y=o(y,[["render",K],["__file","index.html.vue"]]);export{Y as default};
