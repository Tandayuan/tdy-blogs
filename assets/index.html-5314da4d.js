import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c as l,a as n,b as s,d as a,f as t}from"./app-f4ba14bb.js";const r={},c=n("h1",{id:"vscode-vite-ts-eslint-prettier-jest-pnpm框架学习",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vscode-vite-ts-eslint-prettier-jest-pnpm框架学习","aria-hidden":"true"},"#"),s(" vscode-vite-ts-eslint-prettier-jest-pnpm框架学习")],-1),u=n("h2",{id:"仓库地址",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#仓库地址","aria-hidden":"true"},"#"),s(" 仓库地址")],-1),d={href:"https://github.com/Tandayuan/await-to-js-study",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"学习参考项目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#学习参考项目","aria-hidden":"true"},"#"),s(" 学习参考项目")],-1),v={href:"https://github1s.com/scopsy/await-to-js",target:"_blank",rel:"noopener noreferrer"},m=t('<h2 id="学习完成目标" tabindex="-1"><a class="header-anchor" href="#学习完成目标" aria-hidden="true">#</a> 学习完成目标：</h2><ol><li>运用 pnpm 作为包管理器。✔</li><li>pnpm 全局包安装注意事项 ✔</li><li>nodeJs 作为环境构建。✔</li><li>上传到 github ✔</li><li>ts 实现, 理解 promise 在 ts 的运用。✔</li><li>使用 eslint 、eslint 配置文件详解。vscode 的 eslint 插件。✔</li><li>Prettier 的使用。vscode 的 Prettier 插件。✔</li><li>Eslint Prettier 一起使用的兼容问题说明。✔</li><li>Eslint Prettier Typescript JavaScript 一起使用的配置。✔</li><li>运用 jest 测试。✔</li><li>vite 打包, 支持 npm 引入使用。✔</li><li>发布到 npm 网上。✔</li><li>做好笔记。✔</li></ol><h2 id="pnpm-安装与配置" tabindex="-1"><a class="header-anchor" href="#pnpm-安装与配置" aria-hidden="true">#</a> pnpm 安装与配置</h2>',3),b={href:"https://juejin.cn/post/7158295493812944904",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.pnpm.cn/installation",target:"_blank",rel:"noopener noreferrer"},h=t(`<ul><li><p>推荐 npm 安装</p></li><li><p>修改 pnpm 的仓库路径、全局路径</p><ul><li><p>配置文件地址：<code>C:\\Users\\电脑名称\\.npmrc</code>，往里添加。</p></li><li><p>global-dir-bin 中的地址要在环境变量 Path 添加一份</p></li><li><p>以上完成后, 运行命令：<code>pnpm i -g pnpm</code>和<code>pnpm i -g</code>，重新安装 pnpm 应用以上配置。</p></li></ul><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token comment">#pnpm全局仓库路径</span>
store-<span class="token function">dir</span>=D:\\<span class="token punctuation">.</span>pnpm\\store
cache-<span class="token function">dir</span>=D:\\<span class="token punctuation">.</span>pnpm\\cache
state-<span class="token function">dir</span>=D:\\<span class="token punctuation">.</span>pnpm\\state
<span class="token comment">#pnpm全局安装路径</span>
global-<span class="token function">dir</span>=D:\\<span class="token punctuation">.</span>pnpm\\global
global-<span class="token function">dir</span><span class="token operator">-</span>bin=D:\\<span class="token punctuation">.</span>pnpm\\bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="eslint-的安装与配置" tabindex="-1"><a class="header-anchor" href="#eslint-的安装与配置" aria-hidden="true">#</a> ESLint 的安装与配置</h2>`,2),q={href:"https://eslint.org/docs/latest/use/getting-started",target:"_blank",rel:"noopener noreferrer"},y={href:"https://juejin.cn/post/6926456864276873230",target:"_blank",rel:"noopener noreferrer"},j={href:"https://www.jianshu.com/p/6254093f846c",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.jianshu.com/p/1e42e289751e",target:"_blank",rel:"noopener noreferrer"},_=t(`<ul><li><p>pnpm 安装 eslint 到项目</p></li><li><p>项目根目录 cli 方式自动建立或手动建立配置文件<code>.eslintrc.js</code></p></li><li><p><code>.eslintrc.js</code>添加好规则后，只能在控制台发现问题和命令方式解决问题<code>eslint --fix xx.js</code></p></li><li><p>下载 vscode 的插件<code>eslint</code>可以在编辑器中出现高亮报错提示，<code>settings.json</code>中配置保存 eslint 自动修复错误。</p><p><code>settings.json</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 开启vscode eslint插件 eslint规则报错高亮提示</span>
<span class="token property">&quot;eslint.enable&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token comment">//编辑器保存时自动将代码按ESLint格式进行修复</span>
<span class="token property">&quot;editor.codeActionsOnSave&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;source.fixAll.eslint&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="prettier-安装与配置" tabindex="-1"><a class="header-anchor" href="#prettier-安装与配置" aria-hidden="true">#</a> Prettier 安装与配置</h2>`,2),x={href:"https://prettier.io/docs/en/install.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://juejin.cn/post/6914549928131821576",target:"_blank",rel:"noopener noreferrer"},w=t(`<ul><li><p>pnpm 安装到项目，创建<code>.prettierrc</code>配置文件</p></li><li><p>没有安装 prettier 到项目, vscode 安装有 prettier 插件，遵循以下规则：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>无 npm 包+无配置文件 = vscode-prettier 内置配置 + vscode 的 setting.json 配置
有 npm 包+无配置文件 = vscode-prettier 内置配置 + vscode 的 setting.json 配置
无 npm 包+有配置文件= vscode-prettier 内置配置 + 本地配置
有 npm 包+有配置文件= npm 包配置 + 本地配置
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>.prettierrc</code>添加好规则后，只能在控制台发现问题和命令方式解决问题<code>npx prettier --write .</code></p></li><li><p>下载 vscode 的插件<code>prettier</code>可以在编辑器中出现高亮报错提示，<code>settings.json</code>中配置保存 prettier 自动修复错误。</p><p><code>settings.json</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;prettier.enable&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 控制是否启用 vscode-prettier 插件。当你改变这个设置时，你必须重新启动 VSCode。</span>
<span class="token property">&quot;prettier.resolveGlobalModules&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 启用后，如果没有本地依赖，该插件将尝试使用全局 npm 或 yarn 模块。</span>
<span class="token comment">// 编辑器开启保存后自动格式化，所有文件的格式化工具为prettier</span>
<span class="token property">&quot;editor.formatOnSave&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token property">&quot;editor.defaultFormatter&quot;</span><span class="token operator">:</span> <span class="token string">&quot;esbenp.prettier-vscode&quot;</span><span class="token punctuation">,</span>
<span class="token comment">// 也可以只设置 javascript 的默认格式化工具为 prettier</span>
<span class="token property">&quot;[javascript]&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;editor.defaultFormatter&quot;</span><span class="token operator">:</span> <span class="token string">&quot;esbenp.prettier-vscode&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;editor.formatOnSave&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 保存的时候自动格式化</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token comment">// 以上是vscode-prettier特有的配置属性, 与prettier本身没有任何关系。</span>
<span class="token comment">/*
* 因为vscode-prettier内置了prettier的缘故, 甚至可以在settings.json中配置prettier的规则。
* 仅限项目中没有npm包和.prettierrc文件时,settings.json的prettier规则才会生效。
*/</span>
<span class="token property">&quot;prettier.semi&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 语句末尾添加分号</span>
<span class="token property">&quot;prettier.singleQuote&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 使用单引号</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="eslint-和-prettier-的组合使用" tabindex="-1"><a class="header-anchor" href="#eslint-和-prettier-的组合使用" aria-hidden="true">#</a> ESLint 和 Prettier 的组合使用</h2>`,2),E={href:"https://juejin.cn/post/6924568874700505102",target:"_blank",rel:"noopener noreferrer"},P=t(`<ul><li><p>二者组合使用产生的问题：ESLint 和 Prettier 都可以格式化代码的缘故, 格式化某些样式时产生分歧, 编辑器不知道听谁的，从而引发报错。</p></li><li><p>解决思路：</p><ul><li><p>在 ESLint 中引入一组配置, 禁用 eslint 中与 prettier 格式化中分歧的规则。</p><p>现成的 npm 配置包：<code>eslint-config-prettier</code></p></li><li><p>在 ESLint 中插入 prettier 插件, 实现 ESLint 运行时 Prettier 也能同时运行。ESLint 主要用于 JS/TS 的代码质量检查与修复、Prettier 主要用于各种语音的代码风格统一。现成的 npm 插件包： <code>eslint-plugin-prettier</code></p></li></ul></li><li><p>配置文件</p><p><code>.eslintrc.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">commonjs</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">es2021</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">browser</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;plugin:prettier/recommended&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">overrides</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token string">&quot;latest&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>.prettierrc</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;useTabs&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;tabWidth&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token property">&quot;printWidth&quot;</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
  <span class="token property">&quot;singleQuote&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;trailingComma&quot;</span><span class="token operator">:</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;bracketSpacing&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;semi&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vs-code 的<code>settings.json</code></p><p>因为<code>eslint-plugin-prettier</code>插件让 prettier 在 eslint 中运行了, 因此开启 eslint 运行就 OK。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// eslint</span>
<span class="token property">&quot;eslint.enable&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token comment">//保存时自动将代码按ESLint格式进行修复</span>
<span class="token property">&quot;editor.codeActionsOnSave&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
   <span class="token property">&quot;source.fixAll.eslint&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="eslint-prettier-typescript-javascript-组合使用" tabindex="-1"><a class="header-anchor" href="#eslint-prettier-typescript-javascript-组合使用" aria-hidden="true">#</a> ESLint Prettier TypeScript JavaScript 组合使用</h2><ul><li><p>在<code>ESLint和Prettier的组合使用</code>的基础上添加配置。</p></li><li><p>安装</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pnpm add -D
@typescript-eslint/eslint-plugin @typescript-eslint/parser
eslint prettier typescript
eslint-config-prettier eslint-plugin-prettier
eslint-config-airbnb-base eslint-config-standard-with-typescript
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>.eslintrc.js</code>配置文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">commonjs</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">es2021</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">browser</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;standard-with-typescript&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;plugin:prettier/recommended&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// &#39;standard-with-typescript&#39;内部overrides了ts类型相关的文件, 无需overrides。</span>
  <span class="token literal-property property">overrides</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">files</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;*.ts&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*.tsx&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">project</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./tsconfig.json&quot;</span><span class="token punctuation">]</span> <span class="token comment">// 指定ts配置文件路径 不然报错</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">files</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;*.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;airbnb-base&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;plugin:prettier/recommended&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// &#39;airbnb-base&#39;没做js和ts兼容, 防止规则冲突单独适配js。</span>
      <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;no-console&quot;</span><span class="token operator">:</span> <span class="token string">&quot;off&quot;</span> <span class="token comment">// rules里的配置优先级大于extends</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token string">&quot;latest&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="jest-安装与配置" tabindex="-1"><a class="header-anchor" href="#jest-安装与配置" aria-hidden="true">#</a> Jest 安装与配置</h2>`,4),L={href:"https://jestjs.io/zh-Hans/docs/getting-started",target:"_blank",rel:"noopener noreferrer"},J=t(`<ul><li><p>安装完成后,根据 Jest 官网指引安装兼容 Typescript 的包。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>@types/jest ts-jest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>上一步完成后, 初始化生成 jest 配置文件： <code>npx jest --init</code></p><p><code>jest.config.ts</code> 配置文件里添加 preset 属性的值</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Config <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;jest&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> config<span class="token operator">:</span> Config <span class="token operator">=</span> <span class="token punctuation">{</span>
  preset<span class="token operator">:</span> <span class="token string">&quot;ts-jest&quot;</span> <span class="token comment">// 配置里添加预设</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> config<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>根据 Jest 官网指引安装 Babel，babel 配置加入对应预设。完成后支持 JsModule 方式导入测试文件。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>@babel/core @babel/preset-env babel-jest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>babel.config.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">targets</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token string">&quot;current&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>安装解析<code>jest.config.ts</code>文件的包：<code>pnpm add -D ts-node @types/node</code></p></li><li><p>本地创建一个文件夹<code>tests</code>，里面包含<code>*.test.ts</code>的文件用于测试</p></li><li><p><code>package.json</code>的 script 加入<code>test: jest</code>，开启测试~</p></li></ul><h2 id="vite-安装与配置" tabindex="-1"><a class="header-anchor" href="#vite-安装与配置" aria-hidden="true">#</a> Vite 安装与配置</h2>`,2),V={href:"https://cn.vitejs.dev/guide/#scaffolding-your-first-vite-project",target:"_blank",rel:"noopener noreferrer"},C=t(`<ul><li><p>安装选项选择：<code>lib</code>模式</p></li><li><p>生成的<code>tsconfig.json</code>的<code>include</code>追加<code>vite.config.ts</code>，为了 eslint 检测到这个文件。</p></li><li><p><code>vite.config.ts</code>设置了几个模式，其中<code>lib</code>模式打包构建<code>lib</code>目录文件，<code>dev</code>模式下可以在线调试运行调试项目和打包构建，<code>production</code>模式是上线模式，请求的 url 更改为线上地址。</p></li><li><p><code>package.json</code>增加或修改的配置：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span> <span class="token comment">// vite默认使用原生ES模块</span>
<span class="token comment">// 打包后生成静态文件库，库作为依赖被引用。不同的引用方式动态使用不同的静态包。</span>
<span class="token comment">// ESModule方式使用这个规则下的包：&quot;import&quot;: &quot;./dist_lib/gracefulPromise.js&quot;</span>
<span class="token comment">// CommonJs方式则是&quot;require&quot;: &quot;./dist_lib/gracefulPromise.umd.cjs&quot;</span>
<span class="token comment">// main是兼容前两种的方式外还支持umd方式的引用</span>
<span class="token comment">// 有关types字段与ts提示语法相关，不做过多说明。</span>
<span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist_lib/gracefulPromise.umd.cjs&quot;</span><span class="token punctuation">,</span>
<span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist_lib/gracefulPromise.js&quot;</span><span class="token punctuation">,</span>
<span class="token property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./index.d.ts&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;import&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist_lib/gracefulPromise.js&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;require&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist_lib/gracefulPromise.umd.cjs&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./index.d.ts&quot;</span><span class="token punctuation">,</span>
<span class="token comment">// 当你的包作为依赖项安装时要包含的条目</span>
<span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;dist_lib&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;index.d.ts&quot;</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>babel.config.js</code>和<code>.eslintrc.js</code>的后缀改为<code>cjs</code>，因为<code>package.json</code>文件声明了<code>type:module</code>，config 文件的导出模式与之冲突，改为<code>cjs</code> npm 才能识别它们是<code>commonJs</code>的导出模块，而不是<code>ESModule</code></p></li></ul><h2 id="发布包到-npm" tabindex="-1"><a class="header-anchor" href="#发布包到-npm" aria-hidden="true">#</a> 发布包到 npm</h2><ul><li><code>npm login</code></li><li><code>npm publish</code></li></ul>`,3);function O(T,D){const e=o("ExternalLinkIcon");return i(),l("div",null,[c,u,n("p",null,[n("a",d,[s("https://github.com/Tandayuan/await-to-js-study"),a(e)])]),k,n("p",null,[n("a",v,[s("scopsy/await-to-js - GitHub1s"),a(e)])]),m,n("p",null,[n("a",b,[s("配合食用：PNPM 设置全局包路径 - 掘金 (juejin.cn)"),a(e)])]),n("p",null,[n("a",g,[s("安装 | pnpm 中文文档 | pnpm 中文网"),a(e)])]),h,n("p",null,[n("a",q,[s("ESlint 官网 Getting Started"),a(e)])]),n("p",null,[n("a",y,[s("配合食用：VSCode 插件之 ESLint - 掘金 (juejin.cn)"),a(e)])]),n("p",null,[n("a",j,[s("配合食用：ESLint 配置详解(一) - 超级深入详细 - 简书 (jianshu.com)"),a(e)])]),n("p",null,[n("a",f,[s("配合食用：ESLint 配置详解(二) - 常用规则(Rules)集合 - 简书 (jianshu.com)"),a(e)])]),_,n("p",null,[n("a",x,[s("Install · Prettier 官网"),a(e)])]),n("p",null,[n("a",S,[s("配合食用：VSCode 插件之 Prettier - 掘金 (juejin.cn)"),a(e)])]),w,n("p",null,[n("a",E,[s("配合食用：ESLint 之与 Prettier 配合使用 - 掘金 (juejin.cn)"),a(e)])]),P,n("p",null,[n("a",L,[s("快速开始 · Jest 官网 (jestjs.io)"),a(e)])]),J,n("p",null,[n("a",V,[s("开始 | Vite 官方中文文档 (vitejs.dev)"),a(e)])]),C])}const A=p(r,[["render",O],["__file","index.html.vue"]]);export{A as default};
