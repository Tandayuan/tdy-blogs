import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o,c,a as s,b as e,d as a,f as t}from"./app-8706c129.js";const d="/tdy-blogs/assets/git控制台-753879d3.jpg",p={},r=s("h2",{id:"仓库地址",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#仓库地址","aria-hidden":"true"},"#"),e(" 仓库地址")],-1),u={href:"https://github.com/Tandayuan/husky-study",target:"_blank",rel:"noopener noreferrer"},h=s("h2",{id:"配合食用文章",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#配合食用文章","aria-hidden":"true"},"#"),e(" 配合食用文章")],-1),g={href:"https://zhuanlan.zhihu.com/p/471039163",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.npmjs.com/package/lint-staged",target:"_blank",rel:"noopener noreferrer"},k=t('<h2 id="学习目标" tabindex="-1"><a class="header-anchor" href="#学习目标" aria-hidden="true">#</a> 学习目标</h2><ul><li><p>了解 GitHook 的作用 ✔</p></li><li><p>理解 husky 的原理 ✔</p></li><li><p>了解 lint-staged 的作用 ✔</p></li><li><p>学习 husky 和 lint-staged 以及 prettier、eslint 的结合使用 ✔</p></li><li><p>prettier + eslint 利用 lint-staged + husky 统一代码风格 ✔</p></li></ul><h2 id="githook" tabindex="-1"><a class="header-anchor" href="#githook" aria-hidden="true">#</a> GitHook</h2>',3),v={href:"https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90",target:"_blank",rel:"noopener noreferrer"},b=s("ul",null,[s("li",null,"Git 钩子是 Git 做重要动作前执行自定义脚本，比如在 git commit 时，会被 Hook 住，执行 Hook 的脚本再去执行 git commit 命令。在 git 中这种行为叫 pre-commit 钩子。"),s("li",null,"具体细节点击文档查看")],-1),f=s("h2",{id:"husky",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#husky","aria-hidden":"true"},"#"),e(" Husky")],-1),_={href:"https://typicode.github.io/husky/#/",target:"_blank",rel:"noopener noreferrer"},x=t(`<ul><li><p>git 钩子脚本一般存在项目根目录中<code>.git/hooks</code>，<code>hooks</code>目录中又存在了<code>**.sample</code>的脚本文件。以<code>pre-commit.sample</code>为例，如果想要执行 pre-commit 的钩子，把写好的 sample 脚本后缀名去除掉(<code>pre-commit</code>)。只要脚本内容编译正确，那么执行 git commit 的操作前会预期先执行钩子中的脚本。</p></li><li><p>多人协作的团队项目中，由于<code>.git</code>都是忽略上传的, 只存在于本地中，所以 hook 脚本不能在团队中发挥作用。<code>husky</code>解决了上述的问题，它可以在项目中编写 githook 脚本并自动映射执行 githook 操作和能上传脚本到 git 仓库中统一应用项目成员的脚本。</p></li><li><p>安装和配置教程看文档</p></li><li><p>踩坑：</p><ul><li>低版本 Node(15&gt;version)执行如下命令会不生效</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx husky <span class="token function">add</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span> <span class="token punctuation">[</span>cmd<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解决方案：先通过命令添加脚本文件到<code>.husky</code>目录中，目录找到相应的 file 脚本文件，手动添加需要执行的 shell 命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx husky <span class="token function">add</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>.husky/pre-commit</code></p><p>解析：git commit 时会先执行 pre-commit 钩子脚本里的 shell 命令<code>npx eslint --fix .</code>再执行<code>git commit</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env sh</span>
<span class="token builtin class-name">.</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> -- <span class="token string">&quot;<span class="token variable">$0</span>&quot;</span><span class="token variable">)</span></span>/_/husky.sh&quot;</span>
<span class="token comment"># 以下是手动添加的：</span>
npx eslint <span class="token parameter variable">--fix</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>高版本 Node 直接命令添加即可</li></ul></li></ul><h2 id="lint-staged" tabindex="-1"><a class="header-anchor" href="#lint-staged" aria-hidden="true">#</a> lint-staged</h2>`,2),y={href:"https://www.npmjs.com/package/lint-staged",target:"_blank",rel:"noopener noreferrer"},q=t(`<ul><li><p>在使用 Husky 执行钩子脚本<code>npx eslint --fix .</code>，会对所有文件都 eslint 代码检查一遍，对于大型项目来说好使会很久很不友好。<code>lint-staged</code>解决以上问题，它会在代码暂存区中依据配置文件中指定的目录执行指定的脚本，减少项目提交到仓库的耗时。</p></li><li><p>安装和配置</p></li><li><p>配置文件<code>.lintstagedrc</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;src/**/*.{js,ts}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;npx eslint --fix .&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="husky、lint-staged-结合使用" tabindex="-1"><a class="header-anchor" href="#husky、lint-staged-结合使用" aria-hidden="true">#</a> husky、lint-staged 结合使用</h2><ul><li><p>前提：安装并且配置好这两玩意、prettier 和 eslint 已经结合使用。</p></li><li><p>修改 husky 的<code>pre-commit</code>脚本文件为例：</p><ul><li>钩子脚本会执行<code>lint-staged</code></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run lint-staged
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>lint-staged</code>读取<code>.lintstagedrc</code>配置文件： <ul><li><code>.lintstagedrc</code>读取暂存区中 src 中 js 或 ts 文件，对这些文件执行以下 shell 命令：<code>npx eslint --fix .</code> <code>echo &#39;from eslint-staged~&#39;</code></li><li>第一个命令是 eslint 检查并修复暂存区中的相关文件</li><li>第二个命令是在控制台输出 from eslint-staged~字符串</li></ul></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>
    <span class="token string">&quot;src/**/*.{js,ts}&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;npx eslint --fix .&quot;</span>,
      <span class="token string">&quot;echo &#39;from eslint-staged~&#39;&quot;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>以上命令的执行结果可以在 Git 控制台中看到</p><figure><img src="`+d+`" alt="git控制台" tabindex="0" loading="lazy"><figcaption>git控制台</figcaption></figure></li></ul></li></ul><h2 id="prettier-eslint-利用-lint-staged-husky-统一代码风格" tabindex="-1"><a class="header-anchor" href="#prettier-eslint-利用-lint-staged-husky-统一代码风格" aria-hidden="true">#</a> prettier + eslint 利用 lint-staged + husky 统一代码风格</h2><ul><li><p>原理：glob 模式匹配到对应的文件，然后根据 prettier 或者 eslint 命令去统一匹配到的文件风格。</p><p><code>.lintstagedrc</code></p><p>解读：</p><ul><li>匹配到 src 目录下所有 js 或者 ts 文件在 git 暂存区时，执行 eslint 配置统一代码风格。</li><li>匹配到项目所有目录下所有非 js 或者非 ts 文件在 git 暂存区时，执行 prettier 配置统一代码风格。</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;src/**/*.{js,ts}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;eslint --fix&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;echo &#39;eslint格式化中~&#39;&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;!(*.{js,ts})&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;prettier --write&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;echo &#39;prettier格式化中~&#39;&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,5);function j(E,G){const n=l("ExternalLinkIcon");return o(),c("div",null,[r,s("p",null,[s("a",u,[e("https://github.com/Tandayuan/husky-study"),a(n)])]),h,s("p",null,[s("a",g,[e("用 husky 和 lint-staged 构建代码检查工作流 - 知乎 (zhihu.com)"),a(n)])]),s("p",null,[s("a",m,[e("lint-staged 的 example 解读"),a(n)])]),k,s("p",null,[s("a",v,[e("Git 钩子文档"),a(n)])]),b,f,s("p",null,[s("a",_,[e("Husky - Git hooks (typicode.github.io)文档"),a(n)])]),x,s("p",null,[s("a",y,[e("lint-staged 文档地址"),a(n)])]),q])}const A=i(p,[["render",j],["__file","index.html.vue"]]);export{A as default};
